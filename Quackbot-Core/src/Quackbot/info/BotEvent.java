/**
 * @(#)BotEvent.java
 *
 * Copyright Leon Blakey/Lord.Quackstar, 2009-2010
 *
 * This file is part of Quackbot
 *
 * Quackbot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Quackbot is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Quackbot.  If not, see <http://www.gnu.org/licenses/>.
 */
package Quackbot.info;

import Quackbot.hook.Event;

/**
 * Event generated by Bot. Contains everything that the user sent to us
 * <p>
 * WARNING: It is highly recommended to NOT use the set methods! Tampering with them
 * coud yeild unexpected results. Only change if nessesary, but don't set to null!
 * <p>
 * @author Lord.Quackstar
 */
public class BotEvent<A,B> {
	/**
	 * The channel this occured on, or the username of the private message
	 */
	private String channel;
	/**
	 * Sender of the message.  
	 * In a hostmask, its <b>tea4two</b>!addict@host06-AB3404.cablecomp.us
	 */
	private String sender;
	/**
	 * The login of the sender of the message. 
	 * In a hostmask, its tea4two!<b>addict</b>@host06-AB3404.cablecomp.us
	 */
	private String login;
	/**
	 * The hostmask of the sender of the message.
	 * In a hostmask, its tea4two!addict@<b>host06-AB3404.cablecomp.us</b>
	 */
	private String hostname;
	/**
	 * The message that we recieved before parsing. Its NOT what we recieve
	 * from the server!
	 */
	private String rawmsg;
	/**
	 * The command the user requested
	 */
	private String command;
	/**
	 * Any args that are passed. By default its an empty string array
	 */
	private String[] args = new String[0];
	/**
	 * The Command Number of the event
	 */
	private int cmdNum;
	/**
	 * Any extra data. 
	 */
	private A extra;
	/**
	 * Any extra data #2.
	 */
	private B extra1;
	/**
	 * The {@link Event} that this BotEvent originated from
	 */
	private Event event;

	/**
	 * Empty constructor
	 */
	public BotEvent() {
	}
	
	/**
	 * General constructor sets most information
	 * @param event  The {@link Event} that this BotEvent originated from
	 * @param channel  Channel message was sent on
	 * @param sender   User name
	 * @param login    User login
	 * @param hostname User hostname
	 * @param message  Message user sent
	 */
	public BotEvent(Event event, String channel, String sender, String login, String hostname, String message) {
		this.channel = channel;
		this.sender = sender;
		this.login = login;
		this.hostname = hostname;
		this.rawmsg = message;
		this.event = event;
	}

	public BotEvent(Event event, String rawmsg) {
		this.event = event;
		this.rawmsg = rawmsg;
	}

	/**
	 * Generates string representation of event
	 * @return String representation
	 */
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("Channel: " + getChannel() + " ");
		sb.append("Sender: " + getSender() + " ");
		sb.append("Login: " + getLogin() + " ");
		sb.append("Hostname: " + getHostname() + " ");
		sb.append("RawMsg: " + getRawmsg() + " ");
		if(extra1 != null)
			sb.append("Extra: " + getExtra() + " ");
		if(extra1 != null)
			sb.append("Extra1: " + getExtra1() + " ");
		return sb.toString();
	}

	/**
	 * Any extra data. 
	 * @return the extra
	 */
	public A getExtra() {
		return extra;
	}

	/**
	 * Any extra data. This is the <b>only</b> way to set this!
	 * @param extra the extra to set
	 * @return This object
	 */
	public BotEvent<A,B> setExtra(A extra) {
		this.extra = extra;
		return this;
	}

	/**
	 * Any extra data #2. 
	 * @return the extra1
	 */
	public B getExtra1() {
		return extra1;
	}

	/**
	 * Any extra data #2. This is the <b>only</b> way to set this!
	 * @param extra1 the extra1 to set
	 */
	public BotEvent<A,B> setExtra1(B extra1) {
		this.extra1 = extra1;
		return this;
	}

	/**
	 * The {@link Event} that this BotEvent originated from
	 * @return the event
	 */ public Event getEvent() {
		return event;
	}

	/**
	 * The {@link Event} that this BotEvent originated from. This is the <b>only</b> way to set this!
	 * @param event the event to set
	 */ public BotEvent setEvent(Event event) {
		this.event = event;
		return this;
	}



	/**
	 * The channel this occured on, or the username of the private message
	 * @return the channel
	 */
	public String getChannel() {
		return channel;
	}

	/**
	 * The channel this occured on, or the username of the private message
	 * @param channel the channel to set
	 */
	public void setChannel(String channel) {
		this.channel = channel;
	}

	/**
	 * Sender of the message.
	 * In a hostmask, its <b>tea4two</b>!addict@host06-AB3404.cablecomp.us
	 * @return the sender
	 */
	public String getSender() {
		return sender;
	}

	/**
	 * Sender of the message.
	 * In a hostmask, its <b>tea4two</b>!addict@host06-AB3404.cablecomp.us
	 * @param sender the sender to set
	 */
	public void setSender(String sender) {
		this.sender = sender;
	}

	/**
	 * The login of the sender of the message.
	 * In a hostmask, its tea4two!<b>addict</b>@host06-AB3404.cablecomp.us
	 * @return the login
	 */
	public String getLogin() {
		return login;
	}

	/**
	 * The login of the sender of the message.
	 * In a hostmask, its tea4two!<b>addict</b>@host06-AB3404.cablecomp.us
	 * @param login the login to set
	 */
	public void setLogin(String login) {
		this.login = login;
	}

	/**
	 * The hostmask of the sender of the message.
	 * In a hostmask, its tea4two!addict@<b>host06-AB3404.cablecomp.us</b>
	 * @return the hostname
	 */
	public String getHostname() {
		return hostname;
	}

	/**
	 * The hostmask of the sender of the message.
	 * In a hostmask, its tea4two!addict@<b>host06-AB3404.cablecomp.us</b>
	 * @param hostname the hostname to set
	 */
	public void setHostname(String hostname) {
		this.hostname = hostname;
	}

	/**
	 * The message that we recieved before parsing. Its NOT what we recieve from the server!
	 * @return the rawmsg
	 */
	public String getRawmsg() {
		return rawmsg;
	}

	/**
	 * The message that we recieved before parsing. Its NOT what we recieve from the server!
	 * @param rawmsg the rawmsg to set
	 */
	public void setRawmsg(String rawmsg) {
		this.rawmsg = rawmsg;
	}

	/**
	 * The command the user requested
	 * @return the command
	 */
	public String getCommand() {
		return command;
	}

	/**
	 * The command the user requested
	 * @param command the command to set
	 */
	public void setCommand(String command) {
		this.command = command;
	}

	/**
	 * Any args that are passed. By default its an empty string array
	 * @return the args
	 */
	public String[] getArgs() {
		return args;
	}

	/**
	 * Any args that are passed. By default its an empty string array
	 * @param args the args to set
	 */
	public void setArgs(String[] args) {
		this.args = args;
	}

	/**
	 * The Command Number of the event
	 * @return the cmdNum
	 */
	public int getCmdNum() {
		return cmdNum;
	}

	/**
	 * The Command Number of the event
	 * @param cmdNum the cmdNum to set
	 */
	public void setCmdNum(int cmdNum) {
		this.cmdNum = cmdNum;
	}
}
