/**
 * @(#)BotEvent.java
 *
 * This file is part of Quackbot
 */
package Quackbot.info;

/**
 * Event generated by Bot. Contains everything that the user sent to us
 * <p>
 * WARNING: It is highly recommended to NOT use the set methods! Tampering with them
 * coud yeild unexpected results. Only change if nessesary, but don't set to null!
 * <p>
 * @author Lord.Quackstar
 */
public class BotEvent {
	/**
	 * The channel this occured on, or the username of the private message
	 */
	private String channel;
	/**
	 * Sender of the message.  
	 * In a hostmask, its <b>tea4two</b>!addict@host06-AB3404.cablecomp.us
	 */
	private String sender;
	/**
	 * The login of the sender of the message. 
	 * In a hostmask, its tea4two!<b>addict</b>@host06-AB3404.cablecomp.us
	 */
	private String login;
	/**
	 * The hostmask of the sender of the message.
	 * In a hostmask, its tea4two!addict@<b>host06-AB3404.cablecomp.us</b>
	 */
	private String hostname;
	/**
	 * The message that we recieved before parsing. Its NOT what we recieve from the server!
	 */
	private String rawmsg;
	/**
	 * The command the user requested
	 */
	private String command;
	/**
	 * Any args that are passed. By default its an empty string array
	 */
	private String[] args = new String[0];
	/**
	 * The Command Number of the event
	 */
	private int cmdNum;
	/**
	 * Any extra data. Stored as an object and must be cast to the desired type
	 */
	private Object extra;
	/**
	 * Any extra data #2. Stored as an object and must be cast to the desired type
	 */
	private Object extra1;

	/**
	 * Empty constructor
	 */
	public BotEvent() {
	}

	/**
	 * General constructor sets most information
	 * @param channel  Channel message was sent on
	 * @param sender   User name
	 * @param login    User login
	 * @param hostname User hostname
	 * @param message  Message user sent
	 */
	public BotEvent(String channel, String sender, String login, String hostname, String message) {
		this(channel, sender, login, hostname, message, null, null);
	}

	/**
	 * Convience Constructor for only configuring message and extra object. Usually used by Hook managment
	 * @param rawmsg Message user sent
	 * @param extra  Extra object
	 */
	public BotEvent(String rawmsg, Object extra) {
		this(rawmsg, extra, null);
	}

	/**
	 * Convience Constructor for only configuring message and 2 extra objects. Usually used by Hook managment
	 * @param rawmsg Message user sent
	 * @param extra  Extra object
	 * @param extra1 Another extra object
	 */
	public BotEvent(String rawmsg, Object extra, Object extra1) {
		this.rawmsg = rawmsg;
		this.extra = extra;
		this.extra1 = extra1;
	}

	/**
	 * Big constructor, configures everthing but the second extra object
	 * @param channel  Channel message was sent on
	 * @param sender   User name
	 * @param login    User login
	 * @param hostname User hostname
	 * @param message  Message user sent
	 * @param extra    Extra object
	 */
	public BotEvent(String channel, String sender, String login, String hostname, String message, Object extra) {
		this(channel, sender, login, hostname, message, extra, null);
	}

	/**
	 * Biggest Constructor, configures everything possible
	 * @param channel  Channel message was sent on
	 * @param sender   User name
	 * @param login    User login
	 * @param hostname User hostname
	 * @param message  Message user sent
	 * @param extra    Extra object
	 * @param extra1   Another extra object
	 */
	public BotEvent(String channel, String sender, String login, String hostname, String message, Object extra, Object extra1) {
		this.channel = channel;
		this.sender = sender;
		this.login = login;
		this.hostname = hostname;
		this.rawmsg = message;
		this.extra = extra;
		this.extra1 = extra1;
	}

	/**
	 * Generates string representation of event
	 * @return String representation
	 */
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("Channel: " + getChannel() + " ");
		sb.append("Sender: " + getSender() + " ");
		sb.append("Login: " + getLogin() + " ");
		sb.append("Hostname: " + getHostname() + " ");
		sb.append("RawMsg: " + getRawmsg() + " ");
		return sb.toString();
	}

	/**
	 * The channel this occured on, or the username of the private message
	 * @return the channel
	 */
	public String getChannel() {
		return channel;
	}

	/**
	 * The channel this occured on, or the username of the private message
	 * @param channel the channel to set
	 */
	public void setChannel(String channel) {
		this.channel = channel;
	}

	/**
	 * Sender of the message.
	 * In a hostmask, its <b>tea4two</b>!addict@host06-AB3404.cablecomp.us
	 * @return the sender
	 */
	public String getSender() {
		return sender;
	}

	/**
	 * Sender of the message.
	 * In a hostmask, its <b>tea4two</b>!addict@host06-AB3404.cablecomp.us
	 * @param sender the sender to set
	 */
	public void setSender(String sender) {
		this.sender = sender;
	}

	/**
	 * The login of the sender of the message.
	 * In a hostmask, its tea4two!<b>addict</b>@host06-AB3404.cablecomp.us
	 * @return the login
	 */
	public String getLogin() {
		return login;
	}

	/**
	 * The login of the sender of the message.
	 * In a hostmask, its tea4two!<b>addict</b>@host06-AB3404.cablecomp.us
	 * @param login the login to set
	 */
	public void setLogin(String login) {
		this.login = login;
	}

	/**
	 * The hostmask of the sender of the message.
	 * In a hostmask, its tea4two!addict@<b>host06-AB3404.cablecomp.us</b>
	 * @return the hostname
	 */
	public String getHostname() {
		return hostname;
	}

	/**
	 * The hostmask of the sender of the message.
	 * In a hostmask, its tea4two!addict@<b>host06-AB3404.cablecomp.us</b>
	 * @param hostname the hostname to set
	 */
	public void setHostname(String hostname) {
		this.hostname = hostname;
	}

	/**
	 * The message that we recieved before parsing. Its NOT what we recieve from the server!
	 * @return the rawmsg
	 */
	public String getRawmsg() {
		return rawmsg;
	}

	/**
	 * The message that we recieved before parsing. Its NOT what we recieve from the server!
	 * @param rawmsg the rawmsg to set
	 */
	public void setRawmsg(String rawmsg) {
		this.rawmsg = rawmsg;
	}

	/**
	 * The command the user requested
	 * @return the command
	 */
	public String getCommand() {
		return command;
	}

	/**
	 * The command the user requested
	 * @param command the command to set
	 */
	public void setCommand(String command) {
		this.command = command;
	}

	/**
	 * Any args that are passed. By default its an empty string array
	 * @return the args
	 */
	public String[] getArgs() {
		return args;
	}

	/**
	 * Any args that are passed. By default its an empty string array
	 * @param args the args to set
	 */
	public void setArgs(String[] args) {
		this.args = args;
	}

	/**
	 * The Command Number of the event
	 * @return the cmdNum
	 */
	public int getCmdNum() {
		return cmdNum;
	}

	/**
	 * The Command Number of the event
	 * @param cmdNum the cmdNum to set
	 */
	public void setCmdNum(int cmdNum) {
		this.cmdNum = cmdNum;
	}

	/**
	 * Any extra data. Stored as an object and must be cast to the desired type
	 * @return the extra
	 */
	public Object getExtra() {
		return extra;
	}

	/**
	 * Any extra data. Stored as an object and must be cast to the desired type
	 * @param extra the extra to set
	 */
	public void setExtra(Object extra) {
		this.extra = extra;
	}

	/**
	 * Any extra data #2. Stored as an object and must be cast to the desired type
	 * @return the extra1
	 */
	public Object getExtra1() {
		return extra1;
	}

	/**
	 * Any extra data #2. Stored as an object and must be cast to the desired type
	 * @param extra1 the extra1 to set
	 */
	public void setExtra1(Object extra1) {
		this.extra1 = extra1;
	}

}
