/**
 * @(#)Event.java,
 *
 * Copyright Leon Blakey/Lord.Quackstar, 2009-2010
 *
 * This file is part of Quackbot
 *
 * Quackbot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Quackbot is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Quackbot.  If not, see <http://www.gnu.org/licenses/>.
 */
package Quackbot.hook;

import Quackbot.Bot;
import Quackbot.Controller;
import Quackbot.PluginType;
import Quackbot.info.BotEvent;
import java.util.ArrayList;
import java.util.List;
import org.jibble.pircbot.DccChat;
import org.jibble.pircbot.DccFileTransfer;
import org.jibble.pircbot.PircBot;
import org.jibble.pircbot.ReplyConstants;
import org.jibble.pircbot.User;

/**
 * Enum of all available events. Most are named after PircBot methods
 * <p>
 * If you are using one of the hooks, please read the section on how the BotEvent
 * is setup, its very important! All BotEvents however have their
 * {@link BotEvent#getEvent() Event} field set correctly
 *
 * @author Lord.Quackstar
 */
public enum Event {
	/**
	 * This method is called whenever an ACTION is sent from a user.  E.g.
	 * such events generated by typing "/me goes shopping" in most IRC clients.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The target of the action, be it a channel or our nick.</li>
	 * <li>sender - The nick of the user that sent the action.</li>
	 * <li>login - The login of the user that sent the action.</li>
	 * <li>hostname - The hostname of the user that sent the action.</li>
	 * <li>rawmsg - The action carried out by the user.</li>
	 * </ul>
	 */
	onAction,
	/**
	 * After calling the listChannels() method in PircBot, the server
	 * will start to send us information about each channel on the
	 * server.  You may override this method in order to receive the
	 * information about each channel as soon as it is received.
	 * <p>
	 * Note that certain channels, such as those marked as hidden,
	 * may not appear in channel listings.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The name of the channel.</li>
	 * <li>rawmsg - The topic for this channel.</li>
	 * <li>extra - The number of users visible in this channel.</li>
	 * <li>Generics - &lt;Integer,Void&gt;</li>
	 * </ul>
	 * <p>
	 * @see PircBot#listChannels()
	 * @see PircBot#listChannels(java.lang.String)
	 */
	onChannelInfo,
	/**
	 * This method is called once the PircBot has successfully connected to
	 * the IRC server.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>Empty, there is no extra information given</li>
	 * </ul>
	 */
	onConnect,
	/**
	 * Called when a user (possibly us) gets operator status taken away.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * <li>rawmsg - The nick of the user that got 'deopped'. Stored as BotEvent.rawmsg</li>
	 * </ul>
	 */
	onDeop,
	/**
	 * Called when a user (possibly us) gets voice status removed.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * <li>rawmsg - The nick of the user that got 'devoiced'.</li>
	 * </ul>
	 */
	onDeVoice,
	/**
	 * This method carries out the actions to be performed when the PircBot
	 * gets disconnected.  This may happen if the PircBot quits from the
	 * server, or if the connection is unexpectedly lost.
	 * <p>
	 * Disconnection from the IRC server is detected immediately if either
	 * we or the server close the connection normally. If the connection to
	 * the server is lost, but neither we nor the server have explicitly closed
	 * the connection, then it may take a few minutes to detect (this is
	 * commonly referred to as a "ping timeout").
	 * <p>
	 * If you wish to get your IRC bot to automatically rejoin a server after
	 * the connection has been lost, then this is probably the ideal method to
	 * override to implement such functionality.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>Empty, there is no extra information given</li>
	 * </ul>
	 */
	onDisconnect,
	/**
	 * This method gets called when a DccFileTransfer has finished.
	 * If there was a problem, the Exception will say what went wrong.
	 * If the file was sent successfully, the Exception will be null.
	 * <p>
	 * Both incoming and outgoing file transfers are passed to this method.
	 * You can determine the type by calling the isIncoming or isOutgoing
	 * methods on the DccFileTransfer object.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>extra - The DccFileTransfer that has finished.</li>
	 * <li>extra1 - null if the file was transfered successfully, otherwise this
	 *          will report what went wrong.</li>
	 * <li>Generics -  &lt;DccFileTransfer,Exception&gt;</li>
	 * </ul>
	 * <p>
	 * @see DccFileTransfer
	 */
	onFileTransferFinished,
	/**
	 * This method is called whenever we receive a FINGER request.
	 * <p>
	 * <b>WARNING:</b> Quackbot's hook works as expected. If you add your
	 * own hook to send the reply, you must either
	 * remove/ignore Quackbot' hook or put your hook in front and stop the
	 * queue when finished so the server doesn't get multiple responses.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The target of the FINGER request, be it our nick or a channel name.</li>
	 * <li>sender - The nick of the user that sent the FINGER request.</li>
	 * <li>login - The login of the user that sent the FINGER request.</li>
	 * <li>hostname - The hostname of the user that sent the FINGER request.</li>
	 * </ul>
	 */
	onFinger,
	/**
	 * This method will be called whenever a DCC Chat request is received.
	 * This means that a client has requested to chat to us directly rather
	 * than via the IRC server. This is useful for sending many lines of text
	 * to and from the bot without having to worry about flooding the server
	 * or any operators of the server being able to "spy" on what is being
	 * said. This abstract implementation performs no action, which means
	 * that all DCC CHAT requests will be ignored by default.
	 * <p>
	 * If you wish to accept the connection, then you may override this
	 * method and call the accept() method on the DccChat object, which
	 * connects to the sender of the chat request and allows lines to be
	 * sent to and from the bot.
	 * <p>
	 * Your bot must be able to connect directly to the user that sent the
	 * request.
	 * <p>
	 * Example:
	 * <pre> public void onIncomingChatRequest(DccChat chat) {
	 *     try {
	 *         // Accept all chat, whoever it's from.
	 *         chat.accept();
	 *         chat.sendLine("Hello");
	 *         String response = chat.readLine();
	 *         chat.close();
	 *     }
	 *     catch (IOException e) {}
	 * }</pre>
	 * <p>
	 * Each time this method is called, it is called from within a new Thread
	 * so that multiple DCC CHAT sessions can run concurrently.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>extra - A DccChat object that represents the incoming chat request.</li>
	 * <li>Generics - &lt;DccChat,Void&gt;</li>
	 * </ul>
	 * <p>
	 * @see DccChat
	 */
	onIncomingChatRequest,
	/**
	 * This method is called whenever a DCC SEND request is sent to the PircBot.
	 * This means that a client has requested to send a file to us.
	 * This abstract implementation performs no action, which means that all
	 * DCC SEND requests will be ignored by default. If you wish to receive
	 * the file, then you may override this method and call the receive method
	 * on the DccFileTransfer object, which connects to the sender and downloads
	 * the file.
	 * <p>
	 * Example:
	 * <pre> public void onIncomingFileTransfer(DccFileTransfer transfer) {
	 *     // Use the suggested file name.
	 *     File file = transfer.getFile();
	 *     // Receive the transfer and save it to the file, allowing resuming.
	 *     transfer.receive(file, true);
	 * }</pre>
	 * <p>
	 * <b>Warning:</b> Receiving an incoming file transfer will cause a file
	 * to be written to disk. Please ensure that you make adequate security
	 * checks so that this file does not overwrite anything important!
	 * <p>
	 * Each time a file is received, it happens within a new Thread
	 * in order to allow multiple files to be downloaded by the PircBot
	 * at the same time.
	 * <p>
	 * If you allow resuming and the file already partly exists, it will
	 * be appended to instead of overwritten.  If resuming is not enabled,
	 * the file will be overwritten if it already exists.
	 * <p>
	 * You can throttle the speed of the transfer by calling the setPacketDelay
	 * method on the DccFileTransfer object, either before you receive the
	 * file or at any moment during the transfer.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>extra - The DcccFileTransfer that you may accept.</li>
	 * <li>Generics - &lt;DccFileTransfer,Void&gt;</li>
	 * </ul>
	 * <p>
	 * @see DccFileTransfer
	 */
	onIncomingFileTransfer,
	/**
	 * Called when we are invited to a channel by a user.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The nick of the user being invited - should be us!</li>
	 * <li>sender - The nick of the user that sent the invitation.</li>
	 * <li>login - The login of the user that sent the invitation.</li>
	 * <li>hostname - The hostname of the user that sent the invitation.</li>
	 * <li>rawmsg - The channel that we're being invited to.</li>
	 * </ul>
	 */
	onInvite,
	/**
	 * This method is called whenever someone (possibly us) joins a channel
	 * which we are on.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel which somebody joined.</li>
	 * <li>sender - The nick of the user who joined the channel.</li>
	 * <li>login - The login of the user who joined the channel.</li>
	 * <li>hostname - The hostname of the user who joined the channel.</li>
	 * </ul>
	 */
	onJoin,
	/**
	 * This method is called whenever someone (possibly us) is kicked from
	 * any of the channels that we are in.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel from which the recipient was kicked.</li>
	 * <li>sender - The nick of the user who performed the kick.</li>
	 * <li>login - The login of the user who performed the kick.</li>
	 * <li>hostname - The hostname of the user who performed the kick.</li>
	 * <li>rawmsg - The reason given by the user who performed the kick.</li>
	 * <li>extra - The unfortunate recipient of the kick.</li>
	 * <li>Generics - &lt;String,Void&gt;</li>
	 * </ul>
	 */
	onKick,
	/**
	 * This method is called whenever a message is sent to a channel.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel to which the message was sent.</li>
	 * <li>sender - The nick of the person who sent the message.</li>
	 * <li>login - The login of the person who sent the message.</li>
	 * <li>hostname - The hostname of the person who sent the message.</li>
	 * <li>rawmsg - The actual message sent to the channel.</li>
	 * </ul>
	 */
	onMessage,
	/**
	 * Called when the mode of a channel is set.
	 * <p>
	 * You may find it more convenient to decode the meaning of the mode
	 * string by overriding the onOp, onDeOp, onVoice, onDeVoice,
	 * onChannelKey, onDeChannelKey, onChannelLimit, onDeChannelLimit,
	 * onChannelBan or onDeChannelBan methods as appropriate.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel that the mode operation applies to.</li>
	 * <li>sender - The nick of the user that set the mode.</li>
	 * <li>login - The login of the user that set the mode.</li>
	 * <li>hostname - The hostname of the user that set the mode.</li>
	 * <li>rawmsg - The mode that has been set.</li>
	 * </ul>
	 */
	onMode,
	/**
	 * This method is called whenever someone (possibly us) changes nick on any
	 * of the channels that we are on.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The new nick.</li>
	 * <li>sender - The old nick.</li>
	 * <li>login - The login of the user.</li>
	 * <li>hostname - The hostname of the user.</li>
	 * </ul>
	 */
	onNickChange,
	/**
	 * This method is called whenever we receive a notice.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The target of the notice, be it our nick or a channel name.</li>
	 * <li>sender - The nick of the user that sent the notice.</li>
	 * <li>login - The login of the user that sent the notice.</li>
	 * <li>hostname - The hostname of the user that sent the notice.</li>
	 * <li>rawmsg - The notice message.</li>
	 * </ul>
	 */
	onNotice,
	/**
	 * Called when a user (possibly us) gets granted operator status for a channel.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change..</li>
	 * <li>rawmsg - The nick of the user that got 'opped'.</li>
	 * </ul>
	 */
	onOp,
	/**
	 * This method is called whenever someone (possibly us) parts a channel
	 * which we are on.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel which somebody parted from.</li>
	 * <li>sender - The nick of the user who parted from the channel.</li>
	 * <li>login - The login of the user who parted from the channel.</li>
	 * <li>hostname - The hostname of the user who parted from the channel.</li>
	 * </ul>
	 */
	onPart,
	/**
	 * This method is called whenever we receive a PING request from another
	 * user.
	 * <p>
	 * This Quackbot hook responds correctly, so if you replace it, be sure to
	 * either mimic its functionality.
	 * <p>
	 * <b>WARNING:</b> Quackbot's hook works as expected. If you add your
	 * own hook to send the reply, you must either
	 * remove/ignore Quackbot' hook or put your hook in front and stop the
	 * queue when finished so the user doesn't get multiple pongs!
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The target of the PING request, be it our nick or a channel name.</li>
	 * <li>sender - The nick of the user that sent the PING request.</li>
	 * <li>login - The login of the user that sent the PING request.</li>
	 * <li>hostname - The hostname of the user that sent the PING request.</li>
	 * <li>rawmsg - The value that was supplied as an argument to the PING command.</li>
	 * </ul>
	 */
	onPing,
	/**
	 * This method is called whenever a private message is sent to the PircBot.
	 * <p>
	 * <b>WARNING:</b> Quackbot's hook works as expected. If you add your
	 * own hook to send the reply, you must either
	 * remove/ignore Quackbot' hook or put your hook in front and stop the
	 * queue when finished so the user doesn't get multiple responses.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>sender - The nick of the person who sent the private message.</li>
	 * <li>login - The login of the person who sent the private message.</li>
	 * <li>hostname - The hostname of the person who sent the private message.</li>
	 * <li>rawmsg - The actual message.</li>
	 * </ul>
	 */
	onPrivateMessage,
	/**
	 * This method is called whenever someone (possibly us) quits from the
	 * server.  We will only observe this if the user was in one of the
	 * channels to which we are connected.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>sender - The nick of the user that quit from the server</li>
	 * <li>login - The login of the user that quit from the server.</li>
	 * <li>hostname - The hostname of the user that quit from the server.</li>
	 * <li>rawmsg - The reason given for quitting the server.</li>
	 * </ul>
	 */
	onQuit,
	/**
	 * Called when a hostmask ban is removed from a channel.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * <li>rawmsg - The hostmask of the user that has been banned.</li>
	 * </ul>
	 */
	onRemoveChannelBan,
	/**
	 * Called when a channel key is removed.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * <li>rawmsg - The key that was in use before the channel key was removed.</li>
	 * </ul>
	 */
	onRemoveChannelKey,
	/**
	 * Called when the user limit is removed for a channel.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * </ul>
	 */
	onRemoveChannelLimit,
	/**
	 * Called when a channel has 'invite only' removed.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * </ul>
	 */
	onRemoveInviteOnly,
	/**
	 * Called when a channel has moderated mode removed.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * </ul>
	 */
	onRemoveModerated,
	/**
	 * Called when a channel is set to allow messages from any user, even
	 * if they are not actually in the channel.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * </ul>
	 */
	onRemoveNoExternalMessages,
	/**
	 * Called when a channel is marked as not being in private mode.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * </ul>
	 */
	onRemovePrivate,
	/**
	 * Called when a channel has 'secret' mode removed.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * </ul>
	 */
	onRemoveSecret,
	/**
	 * Called when topic protection is removed for a channel.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * </ul>
	 */
	onRemoveTopicProtection,
	/**
	 * The actions to perform when a PING request comes from the server.
	 * <p>
	 * <b>WARNING:</b> Quackbot's hook works as expected. If you add your
	 * own hook to send the reply, you must either
	 * remove/ignore Quackbot' hook or put your hook in front and stop the
	 * queue when finished so the server doesn't get multiple responses.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>rawmsg - The response that should be given back in your PONG.</li>>
	 * </ul>
	 */
	onServerPing,
	/**
	 * This method is called when we receive a numeric response from the
	 * IRC server.
	 * <p>
	 * Numerics in the range from 001 to 099 are used for client-server
	 * connections only and should never travel between servers.  Replies
	 * generated in response to commands are found in the range from 200
	 * to 399.  Error replies are found in the range from 400 to 599.
	 * <p>
	 * For example, we can use this method to discover the topic of a
	 * channel when we join it.  If we join the channel #test which
	 * has a topic of &quot;I am King of Test&quot; then the response
	 * will be &quot;<code>PircBot #test :I Am King of Test</code>&quot;
	 * with a code of 332 to signify that this is a topic.
	 * (This is just an example - note that overriding the
	 * <code>onTopic</code> method is an easier way of finding the
	 * topic for a channel). Check the IRC RFC for the full list of other
	 * command response codes.
	 * <p>
	 * PircBot implements the interface ReplyConstants, which contains
	 * constants that you may find useful here.
	 * <p>
	 *  BotEvent configuration:<ul>
	 * <li>extra - The three-digit numerical code for the response</li>
	 * <li>rawmsg - The full response from the IRC server</li>
	 * <li>Generics - &lt;Integer,Void&gt;</li>
	 * </ul>
	 * <p>
	 * @see ReplyConstants
	 */
	onServerResponse,
	/**
	 * Called when a user (possibly us) gets banned from a channel.  Being
	 * banned from a channel prevents any user with a matching hostmask from
	 * joining the channel.  For this reason, most bans are usually directly
	 * followed by the user being kicked :-)
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * <li>rawmsg - The hostmask of the user that has been banned.</li>
	 * </ul>
	 */
	onSetChannelBan,
	/**
	 * Called when a channel key is set.  When the channel key has been set,
	 * other users may only join that channel if they know the key.  Channel keys
	 * are sometimes referred to as passwords.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * <li>rawmsg - The new key for the channel.</li>
	 * </ul>
	 */
	onSetChannelKey,
	/**
	 * Called when a user limit is set for a channel.  The number of users in
	 * the channel cannot exceed this limit.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * <li>extra - The maximum number of users that may be in this channel at the same time.</li>
	 * <li>Generics - &lt;Integer,Void&gt;</li>
	 * </ul>
	 */
	onSetChannelLimit,
	/**
	 * Called when a channel is set to 'invite only' mode.  A user may only
	 * join the channel if they are invited by someone who is already in the
	 * channel.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * </ul>
	 */
	onSetInviteOnly,
	/**
	 * Called when a channel is set to 'moderated' mode.  If a channel is
	 * moderated, then only users who have been 'voiced' or 'opped' may speak
	 * or change their nicks.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * </ul>
	 */
	onSetModerated,
	/**
	 * Called when a channel is set to only allow messages from users that
	 * are in the channel.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * </ul>
	 */
	onSetNoExternalMessages,
	/**
	 * Called when a channel is marked as being in private mode.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * </ul>
	 */
	onSetPrivate,
	/**
	 * Called when a channel is set to be in 'secret' mode.  Such channels
	 * typically do not appear on a server's channel listing.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * </ul>
	 */
	onSetSecret,
	/**
	 * Called when topic protection is enabled for a channel.  Topic protection
	 * means that only operators in a channel may change the topic.
	 * <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * </ul>
	 */
	onSetTopicProtection,
	/**
	 * This method is called whenever we receive a TIME request.
	 * <p>
	 * <b>WARNING:</b> Quackbot's hook works as expected. If you add your
	 * own hook to send the reply, you must either
	 * remove/ignore Quackbot' hook or put your hook in front and stop the
	 * queue when finished so the user doesn't get multiple responses.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The target of the TIME request, be it our nick or a channel name.</li>
	 * <li>sender - The nick of the user that sent the TIME request.</li>
	 * <li>login - The login of the user that sent the TIME request.</li>
	 * <li>hostname - The hostname of the user that sent the TIME request.</li>
	 * </ul>
	 */
	onTime,
	/**
	 * This method is called whenever a user sets the topic, or when
	 * PircBot joins a new channel and discovers its topic.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel that the topic belongs to.</li>
	 * <li>sender - The nick of the user that set the topic.</li>
	 * <li>rawmsg - The topic for the channel.</li>
	 * <li>extra - When the topic was set (milliseconds since the epoch).</li>
	 * <li>extra1 - True if the topic has just been changed, false if
	 *              the topic was already there. Stored as BotEvent.extra1</li>
	 * <li>Generics - &lt;Long,Boolean&gt;</li>
	 * </ul>
	 */
	onTopic,
	/**
	 * This method is called whenever we receive a line from the server that
	 * the PircBot has not been programmed to recognize.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>rawmsg - The raw line that was received from the server</li>
	 * </ul>
	 */
	onUnknown,
	/**
	 * This method is called when we receive a user list from the server
	 * after joining a channel.
	 * <p>
	 * Shortly after joining a channel, the IRC server sends a list of all
	 * users in that channel. The PircBot collects this information and
	 * calls this method as soon as it has the full list.
	 * <p>
	 * To obtain the nick of each user in the channel, call the getNick()
	 * method on each User object in the array.
	 * <p>
	 * At a later time, you may call the getUsers method to obtain an
	 * up to date list of the users in the channel.
	 * <p>
	 * <p>
	 *  BotEvent configuration:<ul>
	 * <li>channel - The name of the channel</li>
	 * <li>extra - An array of User objects belonging to this channel.</li>
	 * <li>Generics - &lt;User[],Void&gt;</li>
	 * </ul>
	 * <p>
	 * @see User
	 */
	onUserList,
	/**
	 * Called when the mode of a user is set.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The nick that the mode operation applies to.</li>
	 * <li>sender - The nick of the user that set the mode.</li>
	 * <li>login - The login of the user that set the mode.</li>
	 * <li>hostname - The hostname of the user that set the mode.</li>
	 * <li>rawmsg - The mode that has been set.</li>
	 * </ul>
	 */
	onUserMode,
	/**
	 * This method is called whenever we receive a VERSION request.
	 * This abstract implementation responds with the PircBot's _version string,
	 * so if you override this method, be sure to either mimic its functionality
	 * or to call super.onVersion(...);
	 * <p>
	 * <b>WARNING:</b> Quackbot's hook works as expected. If you add your
	 * own hook to send the reply, you must either
	 * remove/ignore Quackbot' hook or put your hook in front and stop the
	 * queue when finished so the server doesn't get multiple responses.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The target of the VERSION request, be it our nick or a channel name.</li>
	 * <li>sender - The nick of the user that sent the VERSION request.</li>
	 * <li>login - The login of the user that sent the VERSION request.</li>
	 * <li>hostname - The hostname of the user that sent the VERSION request.</li>
	 * </ul>
	 * @see Bot#setVersion(java.lang.String)
	 */
	onVersion,
	/**
	 * Called when a user (possibly us) gets voice status granted in a channel.
	 *  <p>
	 * This is a type of mode change and is also passed to the onMode
	 * method in the PircBot class.
	 * <p>
	 * BotEvent configuration:<ul>
	 * <li>channel - The channel in which the mode change took place.</li>
	 * <li>sender - The nick of the user that performed the mode change.</li>
	 * <li>login - The login of the user that performed the mode change.</li>
	 * <li>hostname - The hostname of the user that performed the mode change.</li>
	 * <li>rawmsg - The nick of the user that got 'voiced'.</li>
	 * </ul>
	 */
	onVoice,
	/**
	 * Called when the Controller is about to start loading plugins and connecting
	 * to servers. Its recommended that any hooks are added in static blocks so
	 * you can be guaranteed that they run.
	 *
	 * BotEvent configuration:<ul>
	 * <li>Empty, there is no information to pass.</li>
	 * </ul>
	 */
	onInit,
	/**
	 * Called when the plugins are about to be loaded
	 *
	 * BotEvent configuration:<ul>
	 * <li>Empty, there is no information to pass.</li>
	 * </ul>
	 */
	onPluginLoadStart,
	/**
	 * Called when an individual plugin is about to be loaded
	 *
	 * BotEvent configuration:<ul>
	 * <li>extra - The Plugin that is to be loaded</li>
	 * <li>Generics - &lt;PluginType,Void&gt;
	 * </ul>
	 */
	onPluginLoad,
	/**
	 * Called when the plugins are about to be loaded
	 *
	 * BotEvent configuration:<ul>
	 * <li>Empty, there is no information to pass.</li>
	 * </ul>
	 */
	onPluginLoadComplete;

	public static boolean hookExists(Event hook) {
		for (PluginType curPlugin : Controller.instance.plugins)
			if (curPlugin.getHook() != null)
				return true;
		return false;
	}

	public static List<PluginType> getHooks(Event matchHook) {
		List<PluginType> plugins = new ArrayList<PluginType>();
		for (PluginType curPlugin : Controller.instance.plugins) {
			Event curHook = curPlugin.getHook();
			if (curHook != null && curHook == matchHook)
				plugins.add(curPlugin);
		}
		return plugins;
	}
}
