/**
 * @(#)PluginExecutor.java
 *
 * This file is part of Quackbot
 */
package Quackbot;

import Quackbot.err.AdminException;
import Quackbot.err.InvalidCMDException;
import Quackbot.err.NumArgException;

import Quackbot.info.BotMessage;
import Quackbot.info.JSPlugin;
import Quackbot.info.JavaPlugin;
import Quackbot.info.UserMessage;
import Quackbot.log.BotAppender;

import Quackbot.plugins.core.BasePlugin;
import java.util.TreeSet;

import javax.script.Bindings;
import javax.script.ScriptContext;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.SimpleScriptContext;
import org.apache.commons.lang.StringUtils;

import org.apache.log4j.Logger;

/**
 * All calls to ANY command run are called using this class.
 *
 * Using given command, will execute appropiate Java or JS command (JS preferred)
 * @author Lord.Quackstar
 */
public class PluginExecutor implements Runnable {

	/**
	 * Name of command to be run
	 */
	private String command;
	/**
	 * Arguments to pass
	 */
	private String[] params;
	/**
	 * Bot instance (optional)
	 */
	private Bot qb;
	/**
	 * UserMessage bean (used if Bot is executing a command)
	 */
	private UserMessage msgInfo;
	/**
	 * Current Controller instance
	 */
	private Controller ctrl = InstanceTracker.getController();
	/**
	 * Log4j logger
	 */
	private Logger log = Logger.getLogger(PluginExecutor.class);

	/**
	 * Constructs PluginExecutor for bot. Will report errors to passed bot
	 * @param bot     Bot making the call
	 * @param msgInfo UserMessage bean generated by bot
	 */
	public PluginExecutor(Bot bot, UserMessage msgInfo) {
		this.command = msgInfo.getCommand();
		this.params = msgInfo.getArgs();
		this.msgInfo = msgInfo;
		this.qb = bot;
		log.setAdditivity(false);
		log.removeAllAppenders();
		log.addAppender(new BotAppender(qb.getServer()));
	}

	/**
	 * Constructs PluginExecutor for anything else. Errors reported to GUI
	 * @param command Command wished to run
	 * @param params  Parameters needed for commands
	 */
	public PluginExecutor(String command, String[] params) {
		this.command = command;
		this.params = params;
	}

	/**
	 * Run search and execution in new thread
	 *
	 * This simply finds what the command is and sends it to the appropiate parser
	 */
	public void run() {
		try {
			JavaPlugin javaResult = Utils.findJavaPlugin(command);
			JSPlugin jsResult = Utils.findJSPlugin(command);
			if (jsResult != null)
				runJs(jsResult);
			else if (javaResult != null)
				runJava(javaResult);
			else
				throw new InvalidCMDException(command);
		} catch (AdminException e) {
			log.error("Person is not admin!!", e);
			sendIfBot(new BotMessage(msgInfo, e));
		} catch (NumArgException e) {
			log.error("Wrong params!!!", e);
			sendIfBot(new BotMessage(msgInfo, e));
		} catch (InvalidCMDException e) {
			log.error("Command does not exist!", e);
			sendIfBot(new BotMessage(msgInfo, e));
		} catch (ClassCastException e) {
			if (StringUtils.contains(e.getMessage(), "BasePlugin")) {
				log.error("Can't cast java plugin to BasePlugin (maybe class isn't exentding it?) of " + command, e);
				sendIfBot(new BotMessage(msgInfo, new ClassCastException("Can't cast java plugin to BasePlugin (maybe class isn't exentding it?)")));
			} else {
				log.error("Other classCastException in plugin " + command, e);
				sendIfBot(new BotMessage(msgInfo, e));
			}
		} catch (Exception e) {
			log.error("Other error in plugin execution of " + command, e);
			sendIfBot(new BotMessage(msgInfo, e));
		}
		if (qb != null)
			log.info("-----------End execution of command #"+msgInfo.getCmdNum()+",  from " + msgInfo.getRawmsg() + "-----------");
	}

	/**
	 * Javascript executor
	 * @throws Exception When search or command runs into an error
	 */
	public void runJs(JSPlugin cmdInfo) throws Exception {
		log.info("Running Javascript Plugin " + command);
		//Is this an admin function? If so, is the person an admin?
		if (cmdInfo.isAdmin() && !qb.serverDB.adminExists(msgInfo.getSender()))
			throw new AdminException();

		//Does this method require args?
		if (cmdInfo.isReqArg() && params.length == 0) {
			log.debug("Method does require args, passing length 1 array");
			params = new String[1];
		}

		//Does the required number of args exist?
		int user_args = params.length;
		int method_args = cmdInfo.getParams();
		log.debug("User Args: " + user_args + " | Req Args: " + method_args);
		if (user_args != method_args)
			throw new NumArgException(user_args, method_args);

		//All requirements are met, excecute method
		log.info("All tests passed, running method " + command);
		ScriptContext newContext = cmdInfo.getContext();
		Bindings engineScope = cmdInfo.getScope();
		if (qb != null) {
			engineScope.put("msgInfo", msgInfo);
			engineScope.put("qb", qb);
		}
		else {
			//Prevent "not defined" errors
			engineScope.put("msgInfo", null);
			engineScope.put("qb", null);
		}
		engineScope.put("log", Logger.getLogger("Quackbot.plugins.js." + cmdInfo.getName()));

		//build command string
		StringBuilder jsCmd = new StringBuilder();
		jsCmd.append("invoke( ");
		for (String arg : params)
			jsCmd.append(" '" + arg + "',");
		jsCmd.deleteCharAt(jsCmd.length() - 1);
		jsCmd.append(");");

		String jsCommand = jsCmd.toString();

		log.debug("JS cmd: " + jsCommand);

		//Run command
		new ScriptEngineManager().getEngineByName("JavaScript").eval(jsCommand, newContext);
	}

	/**
	 * Runs java command
	 * @param javaLoc    Fully Qualified Class name of command
	 * @throws Exception When command runs into an error
	 */
	public void runJava(JavaPlugin javaLoc) throws ClassCastException, Exception {
		log.info("Running Java Plugin " + command);
		BasePlugin javaCmd = javaLoc.newInstance();
		javaCmd.invoke(qb, msgInfo);
	}

	/**
	 * Utility to send message to server only if  isn't null
	 * @param msg Message to send
	 */
	private void sendIfBot(BotMessage msg) {
		if (qb != null)
			qb.sendMessage(msg.channel, msg.toString());
	}
}
